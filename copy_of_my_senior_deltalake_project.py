# -*- coding: utf-8 -*-
"""Copy of My_Senior_DeltaLake_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRSdHhKQpG4cNGQvPt2_fqQwi6cdaypR
"""

!pip install pandas matplotlib scikit-learn xgboost mlflow

# ‚úÖ Install compatible PySpark and Delta Lake versions
!pip install -q pyspark==3.4.1 delta-spark==2.4.0
# ‚úÖ INSTALL SPARK & DELTA
!pip install -q pyspark==3.4.1 delta-spark==2.4.0 mlflow xgboost

# ‚úÖ IMPORTS & CONFIG
import time
start_time = time.time()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import mlflow
import mlflow.xgboost

from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

from pyspark.sql import SparkSession
from delta import configure_spark_with_delta_pip
from pyspark.sql.functions import col

from google.colab import files
uploaded = files.upload()  # Upload your CSV file

# ‚úÖ SETUP SPARK SESSION WITH DELTA SUPPORT
builder = SparkSession.builder \
    .appName("CSV to Delta") \
    .config("spark.sql.extensions", "io.delta.sql.DeltaSparkSessionExtension") \
    .config("spark.sql.catalog.spark_catalog", "org.apache.spark.sql.delta.catalog.DeltaCatalog")

spark = configure_spark_with_delta_pip(builder).getOrCreate()

# ‚úÖ LOAD CSV TO SPARK DATAFRAME
csv_file = list(uploaded.keys())[0]
df_spark = spark.read.csv(csv_file, header=True, inferSchema=True)
df_spark.write.format("delta").mode("overwrite").save("/tmp/oil_delta_table")
print("‚úÖ CSV converted and saved to Delta format")

# ‚úÖ LOAD BACK FROM DELTA AND CONVERT TO PANDAS
df_delta = spark.read.format("delta").load("/tmp/oil_delta_table")
df = df_delta.select(col("Date"), col("Close")).toPandas()
df.columns = [col.strip() for col in df.columns]
df["Date"] = pd.to_datetime(df["Date"])
df.set_index("Date", inplace=True)

# ‚úÖ FEATURE ENGINEERING
target_col = "Close"
for lag in range(1, 8):
    df[f"lag_{lag}"] = df[target_col].shift(lag)
df.dropna(inplace=True)

# ‚úÖ SPLIT DATA
X = df.drop(target_col, axis=1)
y = df[target_col]
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

# ‚úÖ MLFLOW TRAINING
mlflow.xgboost.autolog()

with mlflow.start_run():
    model = XGBRegressor(n_estimators=100, learning_rate=0.1)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    mlflow.log_metric("rmse", rmse)

    # PLOT ACTUAL VS PREDICTED
    plt.figure(figsize=(10, 6))
    plt.plot(y_test.index, y_test, label="Actual")
    plt.plot(y_test.index, y_pred, label="Predicted")
    plt.title("Oil Price Forecast")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True)
    plt.savefig("forecast_plot.png")
    mlflow.log_artifact("forecast_plot.png")

    # SAVE PREDICTIONS
    pred_df = pd.DataFrame({
        "Date": y_test.index,
        "Actual": y_test,
        "Predicted": y_pred
    })
    pred_df.to_csv("forecast_result.csv", index=False)
    mlflow.log_artifact("forecast_result.csv")

    print(f"‚úÖ RMSE: {rmse:.2f}")
    print("üìà Forecast plot and CSV logged to MLflow.")

    # ‚úÖ 30-DAY FUTURE FORECAST
    future_days = 30
    last_known = df[target_col].iloc[-7:].tolist()
    future_preds = []
    current_lags = last_known.copy()

    for _ in range(future_days):
        input_array = np.array(current_lags[::-1]).reshape(1, -1)
        pred = model.predict(input_array)[0]
        future_preds.append(pred)
        current_lags = current_lags[1:] + [pred]

    future_dates = pd.date_range(start=df.index[-1] + pd.Timedelta(days=1), periods=future_days)
    future_df = pd.DataFrame({"Date": future_dates, "Forecasted_Close": future_preds})
    future_df.to_csv("future_forecast_30days.csv", index=False)
    mlflow.log_artifact("future_forecast_30days.csv")

    # PLOT FUTURE FORECAST
    plt.figure(figsize=(10, 5))
    plt.plot(df.index[-60:], df[target_col].iloc[-60:], label="Recent Close")
    plt.plot(future_dates, future_preds, label="Future Forecast", linestyle='--')
    plt.title("30-Day Oil Price Forecast")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True)
    plt.savefig("future_forecast_plot.png")
    mlflow.log_artifact("future_forecast_plot.png")

    print("üîÆ Future forecast logged to MLflow")

    # ‚úÖ EXECUTION TIME
    end_time = time.time()
    duration_sec = end_time - start_time
    mlflow.log_metric("execution_time_seconds", duration_sec)
    print(f"‚è±Ô∏è Execution time: {duration_sec:.2f} seconds")